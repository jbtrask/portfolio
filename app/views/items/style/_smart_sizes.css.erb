<% 
	def space(length, percent, min = 0)
		space = (length.to_f * percent.to_f / 100.0).floor
		space < min.to_i ? min.to_i : space
		space	
	end

	def corrected_length(content_length, content_percent)
		(content_length.to_f / (content_percent.to_f / 100.0)).ceil
	end

	def layout_info(size, rows, columns, horizontal_content, vertical_content)
		info = {}
		info[:size] = size
		info[:rows] = rows
		info[:columns] = columns
		info[:grid_width_space] = space(size[:width], GRID_PADDING, MIN_GRID_SPACE)
		info[:grid_height_space] = space(size[:height], GRID_PADDING, MIN_GRID_SPACE)
		info[:matrix_width] = columns * size[:width] + (columns - 1) * info[:grid_width_space]
		info[:matrix_height] = rows * size[:height] + (rows - 1) * info[:grid_height_space]
		info[:matrix_width_space] = space(info[:matrix_width], MATRIX_PADDING, MIN_MATRIX_SPACE) 		
		info[:matrix_height_space] = space(info[:matrix_height], MATRIX_PADDING, MIN_MATRIX_SPACE)
		info[:required_width] = info[:matrix_width] + 2 * info[:matrix_width_space]
		info[:required_height] = info[:matrix_height] + 2 * info[:matrix_height_space]
		info[:corrected_required_width] = corrected_length(info[:required_width], horizontal_content)
		info[:corrected_required_height] = corrected_length(info[:required_height], vertical_content)
		info
	end

	sizes = (GRID_MIN / GRID_INCREMENT..GRID_MAX / GRID_INCREMENT).inject([]) do |memo, value|
		memo << { :width => value * GRID_INCREMENT, :height => ((value * GRID_INCREMENT).to_f * GRID_ASPECT_RATIO).round }
	end

	# both are set
	if !rows.nil? && !columns.nil?
		queries = sizes.inject([])  do |list, size|
			layout = layout_info(size, rows, columns, horizontal_content, vertical_content) 
			list << 
			{ 
				:query => "only screen" + 
					(size == sizes.first ? "" : " and (min-height: " + layout[:corrected_required_height].to_s + "px)") + 
					(size == sizes.first ? "" : " and (min-width: " + layout[:corrected_required_width].to_s + "px)"), 
				:layout => layout 
			}
		end
	# one is set, the other is maxed
	elsif !rows.nil? || !columns.nil?
		queries = []
		sizes.each do |size|

			# row provided, auto column
			if !rows.nil?
				(MATRIX_MIN_WIDTH..MATRIX_MAX_WIDTH).each do |column_count|
					layout = layout_info(size, rows, column_count, horizontal_content, vertical_content)
					queries << { :query => "only screen" + (size == sizes.first ? "" : " and (min-height: " + layout[:corrected_required_height].to_s + "px)") + (size == sizes.first ? "" : " and (min-width: " + layout[:corrected_required_width].to_s + "px)"), :layout => layout }
				end
			# column provided, auto row
			else
				(MATRIX_MIN_HEIGHT..MATRIX_MAX_HEIGHT).each do |row_count|
					layout = layout_info(size, row_count, columns, horizontal_content, vertical_content)
					queries << 
					{ 
						:query => "only screen" + 
							(size == sizes.first ? "" : " and (min-height: " + layout[:corrected_required_height].to_s + "px)") + 
							(size == sizes.first ? "" : " and (min-width: " + layout[:corrected_required_width].to_s + "px)"), 
						:layout => layout 
					}
				end
			end
		end
			
	# both are maxed (tbd)
	else
		queries = []
	end

	queries.each do |query|
		layout = query[:layout]
		right_list = not_right_list = bottom_list = not_bottom_list = ""
		(0..CELL_COUNT  - 1).each do |i|
			right = (i + 1) % layout[:columns] == 0
			bottom = ((i + 1).to_f / layout[:columns].to_f).ceil % layout[:rows] == 0
			right_list += (right_list == "" ? "" : ", ") + "li#grid_cell_" + i.to_s if right
			not_right_list += (not_right_list == "" ? "" : ", ") + "li#grid_cell_" + i.to_s if !right
			bottom_list += (bottom_list == "" ? "" : ", ") + "li#grid_cell_" + i.to_s if bottom
			not_bottom_list += (not_bottom_list == "" ? "" : ", ") + "li#grid_cell_" + i.to_s if !bottom 
		end
%>
@media <%= query[:query] %> {

	#h-size:after {
		content: "width:  <%= layout[:size][:width] %> (<%= query[:layout][:columns] %>)"
	}

	#v-size:after {
		content: "height:  <%= layout[:size][:height] %> (<%= query[:layout][:rows] %>)"
	}

	html, body {
		min-width: <%= layout[:required_width] %>px;
		min-height: <%= layout[:required_height] %>px;
	}

	div#main ul {
		width: <%=layout[:matrix_width] %>px;
		min-width: <%= layout[:matrix_width] %>px;
		height: <%= layout[:matrix_height] %>px;
		min-height: <%= layout[:matrix_height] %>px;
	}

	.grid_cell {
		width: <%= layout[:size][:width] %>px;
		min-width: <%= layout[:size][:width] %>px;
		height: <%= layout[:size][:height] %>px;
		min-height: <%= layout[:size][:height] %>px;
		margin: 0 <%= layout[:grid_width_space] %>px <%= layout[:grid_height_space] %>px 0;
	}

<% if !right_list.blank? %>
	<%= right_list %> {
		margin-right: 0
	}
<% end %>

<% if !bottom_list.blank? %>
	<%= bottom_list %> {
		margin-bottom: 0
	}
<% end %>
<% if !not_right_list.blank? %>
	<%= not_right_list %> {
		margin-right: <%= layout[:grid_width_space] %>px;
	}
<% end %>
<% if !not_bottom_list.blank? %>
	<%= not_bottom_list %> {
		margin-bottom: <%= layout[:grid_height_space] %>px;
	}
<% end %>
}		
<%	
	end
%>
